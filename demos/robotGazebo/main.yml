version: "3.7"

x-yarp-base: &yarp-base
  image: icubteamcode/superbuild-gazebo:master-unstable_sources  
  environment:
    - DISPLAY=${DISPLAY}
    - QT_X11_NO_MITSHM=1
    - XAUTHORITY=/root/.Xauthority
    - YARP_FORWARD_LOG_ENABLE=1
    - YARP_ROBOT_NAME
    - APPSAWAY_ROBOT_MODEL
    - APPSAWAY_OPTIONS
  volumes:
    - "/tmp/.X11-unix:/tmp/.X11-unix:rw"
    - "${XAUTHORITY}:/root/.Xauthority:rw"
    - "${YARP_CONF_PATH}:/root/.config/yarp"
  networks:
    - hostnet
#    - type: volume
#      source: yarp-config
#      target: /root/.config/yarp
#      volume:
#        nocopy: true

services:
#following service are configured in icub-main/app/iCubStartup/scripts/iCubStartup.xml.template
  yserver:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp where | grep 'is available at ip' > /dev/null ; if [ ! $$? -eq 0 ]; then yarpserver --write; fi"

#------------------------------------------------------------------------------------------------

  #use network.peer ip address and port 8080 to see the containers status in browser (http://localhost:8080/)
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  hostnet:
    external: true
    name: host

#volumes:
#  yarp-config:
#    driver: vieux/sshfs
#    driver_opts:
#      sshcmd: ${USER_NAME}@${MASTER_ADDR}:${YARP_CONF_PATH}
#      password: ${USER_PASSWORD}
#      allow_other: ""
