version: "3.7"

x-yarp-base: &yarp-base
  image: icubteamcode/speech:v2021.08.1-stable_master_sources
  environment:
    - YARP_FORWARD_LOG_ENABLE=1
    - FILE_INPUT=${KEY_FILE}
    - INPUT_BOX
    - GOOGLE_INPUT
    - LANGUAGE_INPUT
    - GOOGLE_PROCESSING
    - GOOGLE_SYNTHESIS_INPUT
    - LANGUAGE_SYNTHESIS_INPUT
    - VOICE_NAME_INPUT
  volumes:
    - "${HOME}/${YARP_CONF_PATH}:/root/.config/yarp"
    - "${HOME}/${APPSAWAY_APP_PATH_NOT_CONSOLE}/key_folder:/root/authorization"
  networks:
    - hostnet

#note: following services that need yarpRobotinterface is running, I write yarp wait /yarpRobotInterface;
#just to remember us to solve thi issue. Such yarp port doesn't exist.

services:
#following service are configured in icub-main/app/iCubStartup/scripts/iCubStartup.xml.template
  yserver:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp where | grep 'is available at ip' > /dev/null ; if [ ! $$? -eq 0 ]; then yarpserver --read; fi"

#------------------------------------------------------------------------------------------------
  yDemoGoogleSpeech:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "if [ ${GOOGLE_INPUT} = 'True' ]; then yarp wait /microphone/audio:o; googleSpeech --language_code ${LANGUAGE_INPUT}; fi"

  yDemoGoogleProcessing:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "if [ ${GOOGLE_PROCESSING} = 'True' ]; then if [ -f "/root/.config/yarp/yarp_namespace.conf" ]; then yarp wait $$(echo $$(cat /root/.config/yarp/yarp_namespace.conf)); else yarp wait /root; fi; googleSpeechProcess; fi"

#now we connect the output of the googleSpeech to the process

  yConnectToGoogleSpeechProcess:
      <<: *yarp-base
      deploy:
        placement:
          constraints: [node.labels.type != head]
        restart_policy:
          condition: on-failure
      command: sh -c "if [ ${GOOGLE_PROCESSING} = 'True' ]; then if [ ${GOOGLE_INPUT} = 'True' ]; then yarp wait /googleSpeech/result:o; yarp wait /googleSpeechProcess/text:i; yarp connect /googleSpeech/result:o /googleSpeechProcess/text:i; fi; fi;"

  yConnectToGoogleSynthesis:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${GOOGLE_SYNTHESIS_INPUT} = 'True' ]; then if [ ${GOOGLE_INPUT} =  'False' ]; then yarp wait /googleSpeechProcess/result:o; yarp wait /googleSynthesis/text:i; yarp connect /googleSpeechProcess/result:o /googleSynthesis/text:i; fi; fi"

  yconnect_audio:
    <<: *yarp-base
    deploy:
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${GOOGLE_INPUT} = 'True' ]; then yarp wait /microphone/audio:o; yarp wait /googleSpeech/sound:i; yarp connect /microphone/audio:o /googleSpeech/sound:i tcp; fi;"

  yconnect_rpc:
    <<: *yarp-base
    deploy:
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${GOOGLE_INPUT} = 'True' ]; then yarp wait /microphone/rpc; yarp wait /googleSpeech/commands:rpc; yarp connect /googleSpeech/commands:rpc /microphone/rpc tcp; fi;"



#------------------------------------------------------------------------------------------------

  #use network.peer ip address and port 8080 to see the containers status in browser
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]


networks:
  hostnet:
    external: true
    name: host

