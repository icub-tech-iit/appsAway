version: "3.7"

x-yarp-base: &yarp-base
  image: icubteamcode/supervise-calib:v2021.08.1-stable_master_sources 
  environment:
    - YARP_FORWARD_LOG_ENABLE=1
    - LEFT_CUSTOM_PORT
    - RIGHT_CUSTOM_PORT
  volumes:
    - "${HOME}/${YARP_CONF_PATH}:/root/.config/yarp"
  networks:
    - hostnet

#note: following services that need yarpRobotinterface is running, I write yarp wait /yarpRobotInterface;
#just to remember us to solve thi issue. Such yarp port doesn't exist.

services:
#following service are configured in icub-main/app/iCubStartup/scripts/iCubStartup.xml.template
  yserver:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp where | grep 'is available at ip' > /dev/null ; if [ ! $$? -eq 0 ]; then yarpserver --read; fi"



#------------------------------------------------------------------------------------------------
  #Connections to the ports of the module 

  yConnectToLeftInImage:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ! -z ${LEFT_CUSTOM_PORT} ]; then yarp wait $LEFT_CUSTOM_PORT ; yarp wait /calibCamTilt/leftImage:i ; yarp connect $LEFT_CUSTOM_PORT /calibCamTilt/leftImage:i tcp ; else yarp wait /icub/cam/left; yarp wait /calibCamTilt/leftImage:i ; yarp connect /icub/cam/left /calibCamTilt/leftImage:i tcp; fi"


  yConnectToRightInImage:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ! -z ${RIGHT_CUSTOM_PORT} ]; then yarp wait $RIGHT_CUSTOM_PORT ; yarp wait /calibCamTilt/rightImage:i ; yarp connect $RIGHT_CUSTOM_PORT /calibCamTilt/rightImage:i tcp ; else yarp wait /icub/cam/right; yarp wait /calibCamTilt/rightImage:i ; yarp connect /icub/cam/right /calibCamTilt/rightImage:i tcp; fi"
  
  yConnectToLeftOutImage:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp wait /calibCamTilt/leftImage:o ; yarp wait /leftImageOutput; yarp connect /calibCamTilt/leftImage:o /leftImageOutput tcp ;"
  
  yConnectToRightOutImage:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp wait /calibCamTilt/rightImage:o ; yarp wait /rightImageOutput; yarp connect /calibCamTilt/rightImage:o /rightImageOutput tcp ;"
    
 #------------------------------------------------------------------------------------------------

  #use network.peer ip address and port 8080 to see the containers status in browser
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]


networks:
  hostnet:
    external: true
    name: host

