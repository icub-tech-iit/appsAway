version: "3.7"

x-yarp-base: &yarp-base
  image: icubteamcode/grasp-the-ball:v2021.08.1-stable_master_sources
  environment:
    - YARP_FORWARD_LOG_ENABLE=1
    - CALIB_COLOR
    - CALIB_OFFSETS
    - ARM
    - YARP_ROBOT_NAME
  volumes:
    - "${HOME}/${YARP_CONF_PATH}:/root/.config/yarp"
    - "${APPSAWAY_DEMOREDBALL_CONTEXT}:/usr/local/share/ICUBcontrib/contexts/demoRedBall/"
  networks:
    - hostnet

#x-yarp-head: &yarp-head
#  image: icubteamcode/superbuild-icubhead:master-unstable_binaries
#  environment:
#    - YARP_FORWARD_LOG_ENABLE=1
#    - YARP_ROBOT_NAME
#  volumes:
#    - "${HOME}/${YARP_CONF_PATH}:/root/.config/yarp"
#  network_mode: "host"

#note: following services that need yarpRobotinterface is running, I write yarp wait /yarpRobotInterface;
#just to remember us to solve thi issue. Such yarp port doesn't exist.

services:
#following service are configured in icub-main/app/iCubStartup/scripts/iCubStartup.xml.template
  yserver:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp where | grep 'is available at ip' > /dev/null ; if [ ! $$? -eq 0 ]; then yarpserver --read; fi"

  yCartesianSolver_r:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "yarp wait /icub/right_arm/state:o; iKinCartesianSolver --part right_arm"
    #<port timeout="60.0" request="is_ready" reply="[ok]">/icub/yarprobotinterface</port>

  yCartesianSolver_l:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "yarp wait /icub/left_arm/state:o; iKinCartesianSolver --part left_arm"
    #<port timeout="60.0" request="is_ready" reply="[ok]">/icub/yarprobotinterface</port>

  yGazeCtrl:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "yarp wait /icub/head/state:o; yarp wait /imuFilter/measures:o; iKinGazeCtrl --from iKinGazeCtrl.ini --imu::mode off"
    #note: in our issue we used this configuration file config_no_imu_filter.ini,, but I could not find it.
    #<port timeout="60.0" request="is_ready" reply="[ok]">/icub/yarprobotinterface</port>

  yWBD:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "yarp wait /icub/head/state:o; yarp wait /icub/torso/state:o; yarp wait /icub/right_arm/state:o; yarp wait /icub/left_arm/state:o; yarp wait /icub/inertial; wholeBodyDynamics --autoconnect --no_legs --headV2"
    #note: Do I add --headV2 option??.
    #note: We need to check if WBD is already running, because some yarprobotinterface configuration files already contain it.
    # <port timeout="60.0" request="is_ready" reply="[ok]">/icub/yarprobotinterface</port>

  yGravityCompensator:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "yarp wait /wholeBodyDynamics/filtered/inertial:o; gravityCompensator --autoconnect --no_legs --headV2"
    #note: Do I add --headV2 option??.

#------------------------------------------------------------------------------------------------
#Following services are configured in ./icub-main/app/default/scripts/cameras_calib.xml.template
  #yGrabberCameras:
  #  <<: *yarp-base
   # deploy:
   #   placement:
   #     constraints: [node.labels.type == head]
        #command: sh -c "yarpdev --from camera/ServerGrabberDualDragon.ini --split true"
   # command: sh -c "yarpdev --device usbCamera --d /dev/video0 --camModel leopard_python --name /icub/cam/left"

  yCamCalib_l:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "yarp wait /icub/cam/left; camCalib --context cameraCalibration --from icubEyes.ini --group CAMERA_CALIBRATION_LEFT --name /icub/camcalib/left"

  yCamCalib_r:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "yarp wait /icub/cam/right; camCalib --context cameraCalibration --from icubEyes.ini --group CAMERA_CALIBRATION_RIGHT --name /icub/camcalib/right"

  yConnectCam_l:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp wait /icub/cam/left; yarp wait /icub/camcalib/left/in; yarp connect /icub/cam/left /icub/camcalib/left/in tcp"

  yConnectCam_r:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp wait /icub/cam/right; yarp wait /icub/camcalib/right/in; yarp connect /icub/cam/right /icub/camcalib/right/in tcp"
#------------------------------------------------------------------------------------------------
#Following services are configured in icub-main/app/faceExpressions/scripts/faceExpressions.xml.template
#  yserialDevice4Emotions:
#    <<: *yarp-base
#    deploy:
#      placement:
#        constraints: [node.labels.type == head]
#    command: sh -c "yarpdev --name /icub/face/raw --device serial --subdevice serialport --context faceExpressions --from serialport.ini"

#  yEmotions:
#    <<: *yarp-base
#    deploy:
#      placement:
#        constraints: [node.labels.type == head]
#    command: sh -c "emotionInterface --name /icub/face/emotions --context faceExpressions --from emotions.ini"

#  yConnectEmotions:
#    <<: *yarp-base
#    deploy:
#      placement:
#        constraints: [node.labels.type != head]
#      restart_policy:
#        condition: on-failure
#    command: sh -c "yarp wait /icub/face/emotions/out; yarp wait /icub/face/raw/in ; yarp connect /icub/face/emotions/out /icub/face/raw/in tcp"


#------------------------------------------------------------------------------------------------
#Following services are configured in icub-basic-demos/demoRedBall/app/scripts/demoRedBall.xml.template
 #we need to verify following depencencies:
#<port>/icub/camcalib/left/out</port>
#<port>/iKinGazeCtrl/rpc</port>
#<port>/icub/cartesianController/right_arm/state:o</port>
#<port>/icub/cartesianController/left_arm/state:o</port>
#<port>/wholeBodyDynamics/right_arm/FT:i</port>
#<port>/wholeBodyDynamics/left_arm/FT:i</port>

  yTracker:
    <<: *yarp-base
    deploy:
      placement:
       constraints: [node.labels.type != head]
    command: sh -c "yarp wait /icub/camcalib/left/out; yarp wait /iKinGazeCtrl/rpc; yarp wait /icub/cartesianController/right_arm/state:o; yarp wait /icub/cartesianController/left_arm/state:o; yarp wait /wholeBodyDynamics/right_arm/FT:i; yarp wait /wholeBodyDynamics/left_arm/FT:i; pf3dTracker"

  yDemoRedBall:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
    command: sh -c "if [ ${CALIB_OFFSETS} = false ]; then yarp wait /icub/camcalib/left/out; yarp wait /iKinGazeCtrl/rpc; yarp wait /icub/cartesianController/right_arm/state:o; yarp wait /icub/cartesianController/left_arm/state:o; yarp wait /wholeBodyDynamics/right_arm/FT:i; yarp wait /wholeBodyDynamics/left_arm/FT:i; yarp wait /cartesianSolver/left_arm/rpc; yarp wait /cartesianSolver/right_arm/rpc; yarp wait /pf3dTracker/data:o; demoRedBall; fi;"

  yConnectCam2Traker:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_COLOR} = false ]; then yarp wait /icub/camcalib/left/out; yarp wait /pf3dTracker/video:i; yarp connect /icub/camcalib/left/out /pf3dTracker/video:i fast_tcp; fi;"

  yConnectTraker2Demo:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "yarp wait /pf3dTracker/data:o; yarp wait /demoRedBall/trackTarget:i; yarp connect /pf3dTracker/data:o /demoRedBall/trackTarget:i fast_tcp"

 # yConnectDemo2Emotions:
 #   <<: *yarp-base
 #   deploy:
 #     placement:
 #       constraints: [node.labels.type != head]
 #     restart_policy:
 #       condition: on-failure
 #   command: sh -c "yarp wait /demoRedBall/cmdFace:rpc; yarp wait /icub/face/emotions/in; yarp connect /demoRedBall/cmdFace:rpc /icub/face/emotions/in fast_tcp"

  #yCalibOffsets:
  #  <<: *yarp-base
  #  deploy:
  #    placement:
  #      constraints: [node.labels.type != head]
  #    restart_policy:
  #      condition: on-failure
  #  command: sh -c "if [ ${CALIB_OFFSETS} = true ]; then yarp wait /skinManager/skin_events:o; yarp wait /pf3dTracker/data:o; calibOffsets; fi;"

  yCalibColor:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_COLOR} = true ]; then yarp wait /icub/camcalib/left/out; yarp wait /pf3dTracker/video:i; calibColor; fi;"

  ySkinManager:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_OFFSETS} = true ]; then checkRobotInterface; skinManager --from skinManAll.ini --context skinGui; fi;"

  yConnectLeftCam2Color:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_COLOR} = true ]; then yarp wait /icub/camcalib/left/out; yarp wait /calibColor/image:i; yarp connect /icub/camcalib/left/out /calibColor/image:i fast_tcp; fi;"
    #connect right image to calibColor

  yConnectLeftColor2Tracker:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_COLOR} = true ]; then yarp wait /calibColor/image:o; yarp wait /pf3dTracker/video:i; yarp connect /calibColor/image:o /pf3dTracker/video:i fast_tcp; fi;"

  yConnectSkin2Calib:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_OFFSETS} = true ]; then yarp wait /skinManager/skin_events:o; yarp wait /calibOffsets/handSkin:i; yarp connect /skinManager/skin_events:o /calibOffsets/handSkin:i fast_tcp; fi;"

  yConnectTracker2Calib:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_OFFSETS} = true ]; then yarp wait /pf3dTracker/data:o; yarp wait /calibOffsets/tracker:i; yarp connect /pf3dTracker/data:o /calibOffsets/tracker:i fast_tcp; fi;"

  yWriteOffsets:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_OFFSETS} = true ]; then echo 'writeToFile ${ARM}' | yarp rpc /calibOffsets/rpc | cut -d ' ' -f2 | grep '[fail]' > /dev/null; if [ $$? -eq 0 ]; then echo 'File not written'; exit 1; fi; fi;"

  yCalibrateAndRun:
    <<: *yarp-base
    deploy:
      placement:
        constraints: [node.labels.type != head]
      restart_policy:
        condition: on-failure
    command: sh -c "if [ ${CALIB_OFFSETS} = true ]; then yarp wait /icub/camcalib/left/out; yarp wait /iKinGazeCtrl/rpc; yarp wait /icub/cartesianController/right_arm/state:o; yarp wait /icub/cartesianController/left_arm/state:o; yarp wait /wholeBodyDynamics/right_arm/FT:i; yarp wait /wholeBodyDynamics/left_arm/FT:i; yarp wait /cartesianSolver/left_arm/rpc; yarp wait /cartesianSolver/right_arm/rpc; calibrateAndRun.sh /root/.local/share/yarp/contexts/calibOffsets/calibOffsetsResults.txt; fi;"

#------------------------------------------------------------------------------------------------

  #use network.peer ip address and port 8080 to see the containers status in browser
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]


networks:
  hostnet:
    external: true
    name: host

