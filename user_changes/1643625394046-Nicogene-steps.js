//Nicogene
//
//&<h3>Field changed in app: <ins>Blender controller</ins></h3><ul><li>without_robot: {content:You have <b>correctly</b> defined the application for your cluster!\nYou just need to <b>download the script</b> on your console and run the following command in a terminal (you can use the copy cmd button for simplicity).\n<code>mkdir -p ~/teamcode/ && mv ~/Downloads/blenderController_setup.txt ~/teamcode/blenderController_setup.sh && cd ~/teamcode/ && chmod +x blenderController_setup.sh && ./blenderController_setup.sh</code>\n\n<b>Enjoy</b> the application!</p>,cmd:mkdir -p ~/teamcode/ && mv ~/Downloads/blenderController_setup.txt ~/teamcode/blenderController_setup.sh && cd ~/teamcode/ && chmod +x blenderController_setup.sh && ./blenderController_setup.sh<b>,how_to_use:`blender-robotics-utils` contains a suite for converting a urdf to a .blend, so-called `urdfToBlender`, and a panel for controlling you YARP-based robot through Blender, the `blenderRCBPanel`.\n\nIf you have to control a robot different from iCub, you should first create your rig starting from the urdf representation, just simply following [these instructions](https://github.com/robotology/blender-robotics-utils#urdftoblender)\n\nOnce you have your robot inside Blender, you can control it using the [`blenderRCBPanel`](https://github.com/robotology/blender-robotics-utils#blenderrcbpanel-) !\nYou have to configure the panel loading the json that represents the parts of the robot, connect all the parts, press play in the animation and you are good to go!\n\nIf you are using it with the real robot you need it up and running, otherwise if you are running it in simulation you just need gazebo up and running.\n </b>}</li></ul>
db.steps.update ({_id: ObjectId("61f3e7add0152b59863f9c6d")},{$set: {without_robot: {"content":"You have <b>correctly</b> defined the application for your cluster!\nYou just need to <b>download the script</b> on your console and run the following command in a terminal (you can use the copy cmd button for simplicity).\n<code>mkdir -p ~/teamcode/ && mv ~/Downloads/blenderController_setup.txt ~/teamcode/blenderController_setup.sh && cd ~/teamcode/ && chmod +x blenderController_setup.sh && ./blenderController_setup.sh</code>\n\n<b>Enjoy</b> the application!</p>","cmd":"mkdir -p ~/teamcode/ && mv ~/Downloads/blenderController_setup.txt ~/teamcode/blenderController_setup.sh && cd ~/teamcode/ && chmod +x blenderController_setup.sh && ./blenderController_setup.sh","how_to_use":"`blender-robotics-utils` contains a suite for converting a urdf to a .blend, so-called `urdfToBlender`, and a panel for controlling you YARP-based robot through Blender, the `blenderRCBPanel`.\n\nIf you have to control a robot different from iCub, you should first create your rig starting from the urdf representation, just simply following [these instructions](https://github.com/robotology/blender-robotics-utils#urdftoblender)\n\nOnce you have your robot inside Blender, you can control it using the [`blenderRCBPanel`](https://github.com/robotology/blender-robotics-utils#blenderrcbpanel-) !\nYou have to configure the panel loading the json that represents the parts of the robot, connect all the parts, press play in the animation and you are good to go!\n\nIf you are using it with the real robot you need it up and running, otherwise if you are running it in simulation you just need gazebo up and running.\n "}}});
