//vvasco
//
//&<h3>Field changed in app: <ins>Face Landmarks and Pose Detection</ins></h3><ul><li>summary: Face Landmarks and Pose Detection is an application <del>composed by two modules </del>able to detect and mark human fac<del>es and pos</del>es when the user is in front of the robot cameras or of a general webcam. \nFaceLandmarks makes use of the dlib library and the Histogram of Oriented Gradients (HOG) feature combined with a linear classifier, an image pyramid, and sliding window detection scheme. <del>\nYarpOpenPose module is configured to estimate human pose based on OpenPose, a library for real-time multi-person system to jointly detect human body, hand, facial, and foot keypoints (in total 135 keypoints) on single images.</del></li><li>with_robot: {content:You have **correctly** defined the application for your cluster! You just need to **download the script** on your console and run the following command in a terminal (you can use the copy cmd button for simplicity). \n\n`mkdir -p ~/teamcode/ && mv ~/Downloads/faceAndPoseDetection_setup.txt ~/teamcode/faceAndPoseDetection_setup.sh && cd ~/teamcode/ && chmod +x faceAndPoseDetection_setup.sh && ./faceAndPoseDetection_setup.sh` \n\n**Enjoy the application!**,cmd:mkdir -p ~/teamcode/ && mv ~/Downloads/faceAndPoseDetection_setup.txt ~/teamcode/faceAndPoseDetection_setup.sh && cd ~/teamcode/ && chmod +x faceAndPoseDetection_setup.sh && ./faceAndPoseDetection_setup.sh,how_to_use:Once you ran the cluster setup, a GUI is generated: you can choose to run the application using the robot's cameras or a custom port. <del>You can also select between two modules: YarpOpenPose or Face Landmarks; consider that YarpOpenPose requires a GPU node on your cluster. </del>\n\nAs soon as the GUI says 'Application is being deployed!', you are ready to use it. If you choose to run the application using a custom port, in a new terminal do `yarpdev --device DEVICENAME --name PORTNAME --v4l2`, where `DEVICENAME` is the device related to your webcam and `PORTNAME` is the parameter that you have specified in the GUI.}</li><li>without_robot: {content:You have **correctly** defined the application for your cluster! You just need to **download the script** on your console and run the following command in a terminal (you can use the copy cmd button for simplicity).\n\n`mkdir -p ~/teamcode/ && mv ~/Downloads/faceAndPoseDetection_setup.txt ~/teamcode/faceAndPoseDetection_setup.sh && cd ~/teamcode/ && chmod +x faceAndPoseDetection_setup.sh && ./faceAndPoseDetection_setup.sh`\n\n**Enjoy the application!**,cmd:mkdir -p ~/teamcode/ && mv ~/Downloads/faceAndPoseDetection_setup.txt ~/teamcode/faceAndPoseDetection_setup.sh && cd ~/teamcode/ && chmod +x faceAndPoseDetection_setup.sh && ./faceAndPoseDetection_setup.sh,how_to_use:Once you ran the cluster setup, a GUI is generated: you can choose to run the application using the robot's cameras or a custom port. <del>You can also select between two modules: YarpOpenPose or Face Landmarks; consider that YarpOpenPose requires a GPU node on your cluster. </del>\n\nAs soon as the GUI says 'Application is being deployed!', you are ready to use it. If you choose to run the application using a custom port, in a new terminal do `yarpdev --device DEVICENAME --name PORTNAME --v4l2`, where `DEVICENAME` is the device related to your webcam and `PORTNAME` is the parameter that you have specified in the GUI.}</li></ul>
db.steps.update ({_id: ObjectId("5f52487b6de3ecd4c51f19d3")},{$set: {summary: "Face Landmarks and Pose Detection is an application able to detect and mark human faces when the user is in front of the robot cameras or of a general webcam. \nFaceLandmarks makes use of the dlib library and the Histogram of Oriented Gradients (HOG) feature combined with a linear classifier, an image pyramid, and sliding window detection scheme. "}});
db.steps.update ({_id: ObjectId("5f52487b6de3ecd4c51f19d6")},{$set: {with_robot: {"content":"You have **correctly** defined the application for your cluster! You just need to **download the script** on your console and run the following command in a terminal (you can use the copy cmd button for simplicity). \n\n`mkdir -p ~/teamcode/ && mv ~/Downloads/faceAndPoseDetection_setup.txt ~/teamcode/faceAndPoseDetection_setup.sh && cd ~/teamcode/ && chmod +x faceAndPoseDetection_setup.sh && ./faceAndPoseDetection_setup.sh` \n\n**Enjoy the application!**","cmd":"mkdir -p ~/teamcode/ && mv ~/Downloads/faceAndPoseDetection_setup.txt ~/teamcode/faceAndPoseDetection_setup.sh && cd ~/teamcode/ && chmod +x faceAndPoseDetection_setup.sh && ./faceAndPoseDetection_setup.sh","how_to_use":"Once you ran the cluster setup, a GUI is generated: you can choose to run the application using the robot's cameras or a custom port. \n\nAs soon as the GUI says 'Application is being deployed!', you are ready to use it. If you choose to run the application using a custom port, in a new terminal do `yarpdev --device DEVICENAME --name PORTNAME --v4l2`, where `DEVICENAME` is the device related to your webcam and `PORTNAME` is the parameter that you have specified in the GUI."},without_robot: {"content":"You have **correctly** defined the application for your cluster! You just need to **download the script** on your console and run the following command in a terminal (you can use the copy cmd button for simplicity).\n\n`mkdir -p ~/teamcode/ && mv ~/Downloads/faceAndPoseDetection_setup.txt ~/teamcode/faceAndPoseDetection_setup.sh && cd ~/teamcode/ && chmod +x faceAndPoseDetection_setup.sh && ./faceAndPoseDetection_setup.sh`\n\n**Enjoy the application!**","cmd":"mkdir -p ~/teamcode/ && mv ~/Downloads/faceAndPoseDetection_setup.txt ~/teamcode/faceAndPoseDetection_setup.sh && cd ~/teamcode/ && chmod +x faceAndPoseDetection_setup.sh && ./faceAndPoseDetection_setup.sh","how_to_use":"Once you ran the cluster setup, a GUI is generated: you can choose to run the application using the robot's cameras or a custom port. \n\nAs soon as the GUI says 'Application is being deployed!', you are ready to use it. If you choose to run the application using a custom port, in a new terminal do `yarpdev --device DEVICENAME --name PORTNAME --v4l2`, where `DEVICENAME` is the device related to your webcam and `PORTNAME` is the parameter that you have specified in the GUI."}}});
