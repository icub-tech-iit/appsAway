# this workflow will generate the containers on release, generating stable versions of the containers. The tag is given by:
#            - name: Get the version
#              id: get_version
#              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
#              ${{ steps.get_version.outputs.VERSION }}

name: SB_build_release

on:
    push:
        paths:
            - 'dockerfile_images/basic/superbuild/**' # trigger if there are changes to the superbuild
            - '.github/workflows/superbuild_builder_stable.yml'
#    release:
#        types: [published, created, edited]
# other types can include unpublished, deleted, prereleased
    # Testing webhooks here #
    repository_dispatch:
        types: [superbuild_release, AppsAway_release]

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get the version
              id: get_version
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
            - name: Login to DockerHub Registry
              run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            - name: Check AppsAway version
              run: if [ "${{ github.event.client_payload.type }}" == "AppsAway_release" ]; then echo '${{ github.event.client_payload.version }}'; fi


# this block sets the superbuild version tag. If it was triggered by the superbuild release, then
# it gets the version directly from the payload. Otherwise, it gets the release from the information
# stored on our own SB_version.json file. The tag is saved on a temporary file VERSION_FILE.
            - name: set Superbuild version
              run: |
                ls
                if [ "${{ github.event.client_payload.type }}" == "superbuild_release" ]; then $(echo ${{ github.event.client_payload.version }} > VERSION_FILE); else echo "./SB_version.json" > VERSIONFILE_NAME && cat $(cat VERSIONFILE_NAME) | grep -Pio 'v[1-9]{1,}.{1,}(?=\"\})' > VERSION_FILE; fi

###### Command to set the tag for the full superbuild stable Docker image (with version) #######
            - name: set builder tag for Superbuild full
              run: echo "icubteamcode/superbuild:$(cat VERSION_FILE)_sources" > SB_DOCKER_TAG_FULL
################################################################################################

###### Command to set the tag for the thin superbuild stable Docker image (with version) #######
            - name: set builder tag for Superbuild thin
              run: echo "icubteamcode/superbuild:$(cat VERSION_FILE)_binaries" > SB_DOCKER_TAG_PROD
################################################################################################

##################### Command to set the tag for the date argument ######################
            - name: set date argument for Docker build
              run: |
                echo "$(date +'%d/%m/%Y')" > DATE_
                echo "metadata=$(cat DATE_)" > DATE_TAG
                echo $(cat DATE_TAG)
#########################################################################################

######## Command to set the tag for the ubuntu  image argument for full Image ##########
            - name: set starting UBUNTU image argument for Docker build
              run: |
                echo "UBUNTU_IMG_NAME=icubteamcode/ubuntu1804mesa:latest" > UBUNTU_IMAGE_TAG
                echo $(cat UBUNTU_IMAGE_TAG)
#########################################################################################

######## Command to set the tag for the starting image argument for full stable Image ##########
            - name: set starting full image argument for Docker build
              run: |
                echo "SUPERBUILD_FULL_NAME=$(cat SB_DOCKER_TAG_FULL)" > SUPERBUILD_IMAGE_FULL
                echo $(cat SUPERBUILD_IMAGE_FULL)
#########################################################################################
                
######## Command to set the tag for the starting image argument for thin stable Image ##########
            - name: set starting thin image argument for Docker build
              run: |
                echo "SUPERBUILD_THIN_NAME=$(cat SB_DOCKER_TAG_PROD)" > SUPERBUILD_IMAGE_THIN
                echo $(cat SUPERBUILD_IMAGE_THIN)
#########################################################################################

########### This command sets the master/release variable ##############################
            - name: set release/master argument for Docker build
              run: |
                echo "$(cat VERSION_FILE)" > RELEASE_TAG
                echo "release=$(cat RELEASE_TAG)" > RELEASE_ARG
                echo $(cat RELEASE_ARG)
#########################################################################################

######## Command to build the full Docker image, using only stable tag #########
            - name: Build superbuild Docker full image
              run: docker build --build-arg $(cat UBUNTU_IMAGE_TAG) --build-arg $(cat DATE_TAG) --build-arg $(cat RELEASE_ARG) ./dockerfile_images/basic/superbuild --file ./dockerfile_images/basic/superbuild/Dockerfile --tag $(cat SB_DOCKER_TAG_FULL)
#########################################################################################

######### Command to push the full stable Docker Image online ##################################
            - name: Push superbuild Docker full image
              run: docker push $(cat SB_DOCKER_TAG_FULL)
#########################################################################################

######## Command to build the thin Docker image, using only stable tag #########
            - name: Build superbuild Docker thin image
              run: docker build  --build-arg $(cat SUPERBUILD_IMAGE_FULL) --build-arg $(cat UBUNTU_IMAGE_TAG) ./dockerfile_images/basic/superbuild --file ./dockerfile_images/basic/superbuild/Dockerfile4Production --tag $(cat SB_DOCKER_TAG_PROD)
#########################################################################################

######### Command to push the thin stable Docker Image online ##################################
            - name: Push superbuild Docker thin image
              run: docker push $(cat SB_DOCKER_TAG_PROD)
#########################################################################################

#########################################################################################
#################################### BUILD THE DEMOS ####################################
#########################################################################################

######### build the stable version of grasp the ball demo ##################################
            - name: Build graspTheBall Docker thin image
              run: docker build --build-arg $(cat SUPERBUILD_IMAGE_FULL) --build-arg $(cat SUPERBUILD_IMAGE_THIN) ./dockerfile_images/demos/graspTheBall --file ./dockerfile_images/demos/graspTheBall/Dockerfile4Production --tag icubteamcode/grasptheball:$(cat VERSION_FILE)-SB_binaries
############################################################################################

######### push the stable version of grasp the ball demo ##################################
            - name: Push graspTheBall Docker thin image
              run: docker push icubteamcode/grasptheball:$(cat VERSION_FILE)-SB_binaries
############################################################################################
