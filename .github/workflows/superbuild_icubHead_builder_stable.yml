# this workflow will generate the containers on release, generating stable versions of the containers. The tag is given by:
#            - name: Get the version
#              id: get_version
#              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
#              ${{ steps.get_version.outputs.VERSION }}

name: SBIH_build_release

on:
    repository_dispatch:
        types: [SBIH_build_stable]

# other types can include unpublished, deleted, prereleased
    # Testing webhooks here #
#    repository_dispatch:
#        types: [superbuild_release, AppsAway_release]

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  repository: icub-tech-iit/code
                  token: ${{ secrets.CODE_REPO_ACCSS_TOKEN }}

            - name: Get the version
              id: get_version
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
            - name: Login to DockerHub Registry
              run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            - name: Check AppsAway version
              run: if [ "${{ github.event.client_payload.type }}" == "AppsAway_release" ]; then echo '${{ github.event.client_payload.version }}'; fi

########################## Command to set the Superbuild version ########################
            - name: set Superbuild version
              run: if [ "${{ github.event.client_payload.type }}" == "superbuild_release" ]; then $(echo ${{ github.event.client_payload.version }} > VERSION_FILE); else echo "./SB_version.json" > VERSIONFILE_NAME && cat $(cat VERSIONFILE_NAME) | grep -Pio 'v[1-9]{1,}.{1,}(?=\"\})' > VERSION_FILE; fi
#########################################################################################




# this block will generate the image and push it to dockerhub
            - name: Build superbuild-icubhead Docker full image
              run: docker build ${{ github.event.client_payload.docker_path }} --file ${{ github.event.client_payload.docker_path }}/Dockerfile --tag ${{ github.event.client_payload.superbuild_icubHead_stable_tag_full }}
            - name: Push superbuild-icubhead Docker full image
              run: docker push ${{ github.event.client_payload.superbuild_icubHead_stable_tag_full }}

# this block will generate the thin image and push it to dockerhub
            - name: Build superbuild-icubhead Docker thin image
              run: docker build ${{ github.event.client_payload.docker_path }} --file ${{ github.event.client_payload.docker_path }}/Dockerfile4Production --tag ${{ github.event.client_payload.superbuild_icubHead_stable_tag_full }}
            - name: Push superbuild-icubhead Docker thin image
              run: docker push ${{ github.event.client_payload.superbuild_icubHead_stable_tag_full }}



